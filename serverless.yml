service: challengesAPI

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-2
  environment:
    challengesTable: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.challengesTable}"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getSingleChallengeByID:
    handler: stories/basic/getSingleChallengeByID.getSingleChallengeByID
    description: Get a single challenge from databse by it's id
    events:
      - http:
          path: stories/basic/getSingleChallengeByID/{id}
          method: get
          cors: true
  getAllChallenges:
    handler: stories/basic/getAllChallenges.getAllChallenges
    description: Get all challenges from databse
    events:
      - http:
          path: stories/basic/getAllChallenges
          method: get
          cors: true
  filterByID:
    handler: stories/filter/filterByID.filterByID
    description: Filter challenges based on their id
    events:
      - http:
          path: stories/filter/filterByID/{id}
          method: get
          cors: true
  filterByName:
    handler: stories/filter/filterByName.filterByName
    description: Filter challenges based on their name
    events:
      - http:
          path: stories/filter/filterByName/{name}
          method: get
          cors: true
  filterByDifficulty:
    handler: stories/filter/filterByDifficulty.filterByDifficulty
    description: Filter challenges based on their difficulty
    events:
      - http:
          path: stories/filter/filterByDifficulty/{difficulty}
          method: get
          cors: true
  filterByRating:
    handler: stories/filter/filterByRating.filterByRating
    description: Filter challenges based on their rating
    events:
      - http:
          path: stories/filter/filterByRating/{ratingRange}
          method: get
          cors: true
  sortByName:
    handler: stories/sort/sortByName.sortByName
    description: Sort the challenges by their name
    events:
      - http:
          path: stories/sort/sortByName/{sortOrder}
          method: get
          cors: true
  sortByRating:
    handler: stories/sort/sortByRating.sortByRating
    description: Sort the challenges by their rating
    events:
      - http:
          path: stories/sort/sortByRating/{sortOrder}
          method: get
          cors: true
  sortByDifficulty:
    handler: stories/sort/sortByDifficulty.sortByDifficulty
    description: Sort the challenges by their difficulty
    events:
      - http:
          path: stories/sort/sortByDifficulty/{sortOrder}
          method: get
          cors: true
  sortByCreationDate:
    handler: stories/sort/sortByCreationDate.sortByCreationDate
    description: Sort the challenges by their date created
    events:
      - http:
          path: stories/sort/sortByCreationDate/{sortOrder}
          method: get
          cors: true
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.challengesTable}
#  hello:
#    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
